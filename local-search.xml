<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【25杭电春季营热身赛】 T1001 氯化钠</title>
    <link href="/2025/03/05/problem2/"/>
    <url>/2025/03/05/problem2/</url>
    
    <content type="html"><![CDATA[<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>对于一个长度为 $n$ 的数组 $a$ ，定义 $val(l,r) &#x3D;\min(a_l,a_{l+1},…,a_{r-1},a_r)+\max(a_l,a_{l+1},…,a_{r-1},a_r)$ 。小y想知道对于所有的 $val(l,r),1\le l \le r \le n$ ，降序排列后，第 $k$ 个数是多少，也就是第 $k$ 大的 $val$ 。</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行一个正整数 $T (T≤200)$ 表示数据组数。</p><p>对于每组数据：</p><p>第一行输入两个整数 $n$ 和 $k$，$(1≤n≤10^5，1≤k≤\frac{n(n+1)}{2})$ 分别表示数组长度，要求第多少大的 $val$。</p><p>第二行包含 $n$ 个用空格分隔的整数，其中第 $i$ 个数字表示 $a_i$ 的值。 $(0≤a_i≤10^9)$ 。</p><p>保证 $∑n&#x3D;1064824$。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>对于每组数据，输出一个整数，表示所有的 $val(l,r)$ ，$1≤l≤r≤n$ 中，第 $k$ 大的 $val$ 的大小。</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">2</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">9 </span><span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">7<br>13<br></code></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>在刘春英老师发的题解上面补充</p><p>我们可以先确定最小值。去寻找当 $a_i$ 作为最小值时，区间的最左端 $L$ 和最右端 $R$ 在什么地方。换句话说，在 $[l,r],(L\le l \le i,i\le r \le R)$ 内这个区间的最小值都是 $a_i$ 。先令  $a_0 &#x3D; a_{n+1} &#x3D; -2e9$ ，假设遍历到了 $a_i$ ，找到最大的 $0 \le j &lt;i$ ，满足 $a_j &lt; a_i$ ，记 $le_i&#x3D;j+1$。对于右边同理，找到最小的 $ i &lt; j \leq n + 1 $ ，满足 $ a_j \leq a_i $ ，记 $ ri_i &#x3D; j - 1$。至于为什么有一侧是严格小于，这是因为如果都是小于等于，后面算出来的区间就会有重复。举个例子，如果 $a&#x3D;[1,1,1,1,1,1]$ ，分别取第三个和第四个 $1$ ，按照正确的方法求出来的区间分别是 $[1,3]$ 、$[1,4]$ ，如果两侧都是小于等于，那么求出来的区间都会是 $[1,6]$ ，当第三个和第四个 $1$ 分别作为最小值时，求出来的区间可能会有重复，因此必须要有一侧是严格小于。用单调栈就可以实现。</p><p>然后我们转化一下问题，当 $val$ 的大小为 $mid$ 时，二分求一下是否至少有 $k$ 个区间满足 $\max + \min \ge mid$ 。</p><p>考虑 check，考虑枚举每个 $a_i$ 作为 $\min$ ，再在所有区间 $[l, r], le_i \leq l \leq i, i \leq r \leq ri_i$ 中，统计多少个区间满足 $ \max \geq mid - \min $ 。可以以 $i$ 为起点做前缀 $\max$ ， $i$ 为终点做后缀 $\max$ ，发现这两个数组具有单调性，于是又可以二分找到最近的满足条件的前后缀最大值的下标，假设不合适的左右下标为 $ l_0, r_0 $ 。那么不合适的区间个数就是 $(i - l_0 + 1) \times (r_0 - i + 1)$ ，再用总的 $(i - le_i + 1) \times (ri_i - i + 1)$ 减去即可。check 用 st 表二分，或者线段树上二分，复杂度都是 $O(n \log n)$ 。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">50</span>;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> le[N], ri[N];<br><span class="hljs-type">int</span> lg2[N], f[N][<span class="hljs-number">20</span>];<br><span class="hljs-type">int</span> n, k;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> k = lg2[r - l + <span class="hljs-number">1</span>];<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(f[l][k], f[r - (<span class="hljs-number">1</span> &lt;&lt; k) + <span class="hljs-number">1</span>][k]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> tot = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>&#123;<br><span class="hljs-type">int</span> l = le[i] - <span class="hljs-number">1</span>, r = i + <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> L, R;<br><span class="hljs-keyword">while</span> (l + <span class="hljs-number">1</span> &lt; r)<br>&#123;<br><span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">query</span>(mid, i) &lt; x - a[i])<span class="hljs-comment">//mid-min</span><br>r = mid;<br><span class="hljs-keyword">else</span><br>l = mid;<br>&#125;<br>L = r;<br>l = i - <span class="hljs-number">1</span>, r = ri[i] + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (l + <span class="hljs-number">1</span> &lt; r)<br>&#123;<br><span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">query</span>(i, mid) &lt; x - a[i])<br>l = mid;<br><span class="hljs-keyword">else</span><br>r = mid;<br>&#125;<br>R = l;<br>tot += (i - le[i] + <span class="hljs-number">1</span>) * (ri[i] - i + <span class="hljs-number">1</span>) - (i - L + <span class="hljs-number">1</span>) * (R - i + <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">return</span> tot &gt;= k;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>cin &gt;&gt; n &gt;&gt; k;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>cin &gt;&gt; a[i];<br>a[<span class="hljs-number">0</span>] = -inf, a[n + <span class="hljs-number">1</span>] = -inf;<br>stack&lt;<span class="hljs-type">int</span>&gt; stk;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i)<br>lg2[i] = lg2[i &gt;&gt; <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>f[i][<span class="hljs-number">0</span>] = a[i];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= lg2[n]; ++j) <span class="hljs-comment">// 初始化</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i + (<span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>)) &lt;= n; ++i)<br>&#123;<br>f[i][j] = <span class="hljs-built_in">max</span>(f[i][j - <span class="hljs-number">1</span>], f[i + (<span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>))][j - <span class="hljs-number">1</span>]);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n + <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i)<br>&#123;<br><br><span class="hljs-keyword">while</span> (!stk.<span class="hljs-built_in">empty</span>() &amp;&amp; a[stk.<span class="hljs-built_in">top</span>()] &gt; a[i]) <span class="hljs-comment">// 此处可以更改比较关系</span><br>&#123;<br>le[stk.<span class="hljs-built_in">top</span>()] = i + <span class="hljs-number">1</span>;<br>stk.<span class="hljs-built_in">pop</span>();<br>&#125;<br>stk.<span class="hljs-built_in">push</span>(i);<br>&#125;<br><span class="hljs-keyword">while</span> (!stk.<span class="hljs-built_in">empty</span>())<br>stk.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n + <span class="hljs-number">1</span>; ++i)<br>&#123;<br><br><span class="hljs-keyword">while</span> (!stk.<span class="hljs-built_in">empty</span>() &amp;&amp; a[stk.<span class="hljs-built_in">top</span>()] &gt;= a[i]) <span class="hljs-comment">// 此处可以更改比较关系</span><br>&#123;<br>ri[stk.<span class="hljs-built_in">top</span>()] = i - <span class="hljs-number">1</span>;<br>stk.<span class="hljs-built_in">pop</span>();<br>&#125;<br>stk.<span class="hljs-built_in">push</span>(i);<br>&#125;<br><br><span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = inf;<br><span class="hljs-keyword">while</span> (l + <span class="hljs-number">1</span> &lt; r)<br>&#123;<br><span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) <span class="hljs-comment">// 二分答案 if(check(mid))</span><br>l = mid;<span class="hljs-comment">// 最小化</span><br><span class="hljs-keyword">else</span><br>r = mid;<br>&#125;<br>cout &lt;&lt; l &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【25杭电春季营热身赛】 T1006 对吗？对的对的 不对不对</title>
    <link href="/2025/03/01/problem1/"/>
    <url>/2025/03/01/problem1/</url>
    
    <content type="html"><![CDATA[<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>CF (Card Fight) 是一款经典的卡牌战斗游戏，拥有丰富的卡牌和五花八门的机制。</p><p>小D作为一个游戏主播在直播CF时遇到了一个难题，进行了以下的思考：</p><p>“😵哦不对，我打错了！🤓✋哦对的对的，🤨哦不对，😫啊我跟你们说不对，哎呀不对‍，🤔哦对的对的对的对…对吗？哦对的对的对的😁，😐😨不对吧，啊我都搞晕掉了😵‍💫哦😲对对对对对，对对对对我明白了🤓…”</p><p>由于脑子过载，小D经历了千般转折，但是熟知他的观众都早已经了解他的思考方式了：</p><ul><li>小D说的话经过录播记录变成由大写字母组成的字符串。</li><li>如果子序列的YES比NO多，小D就会说 “DUI DE”（对的）</li><li>如果子序列的NO比YES多，小D就会说 “BUDUI BUDUI”（不对不对）</li><li>如果子序列的YES和NO一样多，小D就会说 “DUI DUI DUIMA”（对 对 对吗？）</li></ul><p>但是小D经常再三思考，他会尝试修改原来记录中的任意一个字符以尽可能改变原来的答案，如果改变成功了，他就会恍然大悟，附带一句 “O”（哦！），来表达他的惊讶之情：</p><ul><li>原来是 “DUI DE”，他思考后能变成不对就会恍然大悟，最后说出”O BUDUI BUDUI”</li><li>原来是 “BUDUI BUDUI”，他思考后能变成对的也会恍然大悟，最后说出”O DUI DE”</li><li>如果原来就是一样多，他就会说出”DUI DUI DUIMA”</li><li>如果没有改变或者最多变成一样多，他就会说出原来的答案</li></ul><p>你可以预测出小D要说的下一句话吗？</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>每个测试包含多个测试用例。第一行包含测试用例的数量 $t \ (0≤t≤100)$。测试用例说明如下。</p><p>每个测试用例由一行字符串 $S$  $(|S|≤10^5)$组成，代表小D说过的话。</p><p>保证所有测试用例中 $|S|$ 的总和不超过 $2×10^6$。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>对于每个测试用例，输出两行</p><p>第一行由两个数字组成由空格分开，表示原来字符串中YES的子序列数量和NO的子序列数量。</p><p>第二行是一个字符串，表示小D接下来会说的话。</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-number">3</span> <br><span class="hljs-keyword">YES</span><br>YYEESSNOOO <br>ABULAIKESIYESNO<br></code></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span> <span class="hljs-number">0</span> <br><span class="hljs-attribute">DUI</span> DE <br><span class="hljs-attribute">8</span> <span class="hljs-number">3</span> <br><span class="hljs-attribute">O</span> BUDUI BUDUI <br><span class="hljs-attribute">1</span> <span class="hljs-number">1</span> <br><span class="hljs-attribute">DUI</span> DUI DUIMA<br></code></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>在刘春英老师发的题解上进行补充。</p><p>子序列问题，考虑dp。例如我们求字符串当中YES的数量。我们定义<code>pre_yes[i]</code>为在i前面有多少个yes的数量。<code>pre_ye[i] pre_y[i]</code>同理。那么我们就可以得出递推式<code>pre_yes[i] = pre_yes[i - 1] + (s[i] == &#39;S&#39;) * pre_ye[i - 1]</code>（其他同理）。题目中的第一问就是输出<code>pre_yes[len]</code>和<code>pre_no[len]</code>。</p><p>第二问，我们可以遍历字符串去计算修改这个字母对于YES和NO个数的贡献。当YES的数量小于NO的数量时，我们肯定是贪心的把每个字符修改成Y或者E或者S，怎么计算呢？举个例子，假设遍历到的字母是Y，我们首先先要减去这个Y对于YES子序列的贡献，这个贡献就是<code>suf_es[i]</code>，然后再加上E或者S做出贡献的最大值。算E做出贡献的时候，肯定是算前面有多少个Y，后面有多少个S，两者再相乘，注意在算的时候是<code>(pre_y[i] - 1) * (suf_s[i])</code> ，减去1是因为当前字母本身就是Y。剩下11种情况基本同理。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">50</span>;<br><span class="hljs-type">int</span> pre_y[N], pre_ye[N], pre_yes[N];<br><span class="hljs-type">int</span> pre_n[N], pre_no[N];<br><span class="hljs-type">int</span> suf_es[N], suf_s[N];<br><span class="hljs-type">int</span> pre[<span class="hljs-number">30</span>][N], suf[<span class="hljs-number">30</span>][N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> len, cnty = <span class="hljs-number">0</span>, cntn = <span class="hljs-number">0</span>;<br>string s;<br>cin &gt;&gt; s;<br>len = s.<span class="hljs-built_in">length</span>();<br>s = <span class="hljs-string">&quot; &quot;</span> + s;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= len + <span class="hljs-number">1</span>; ++i)<br>&#123;<br>pre_y[i] = pre_ye[i] = pre_yes[i] = <span class="hljs-number">0</span>;<br>pre_n[i] = pre_no[i] = <span class="hljs-number">0</span>;<br>suf_es[i] = suf_s[i] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> j = <span class="hljs-string">&#x27;A&#x27;</span>; j &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>; ++j)<br>pre[j - <span class="hljs-string">&#x27;A&#x27;</span>][i] = suf[j - <span class="hljs-string">&#x27;A&#x27;</span>][i] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; ++i)<span class="hljs-comment">//前缀</span><br>&#123;<br>pre_y[i] = pre_y[i - <span class="hljs-number">1</span>] + (s[i] == <span class="hljs-string">&#x27;Y&#x27;</span>);<br>pre_ye[i] = pre_ye[i - <span class="hljs-number">1</span>] + (s[i] == <span class="hljs-string">&#x27;E&#x27;</span>) * pre_y[i - <span class="hljs-number">1</span>];<br>pre_yes[i] = pre_yes[i - <span class="hljs-number">1</span>] + (s[i] == <span class="hljs-string">&#x27;S&#x27;</span>) * pre_ye[i - <span class="hljs-number">1</span>];<br>pre_n[i] = pre_n[i - <span class="hljs-number">1</span>] + (s[i] == <span class="hljs-string">&#x27;N&#x27;</span>);<br>pre_no[i] = pre_no[i - <span class="hljs-number">1</span>] + (s[i] == <span class="hljs-string">&#x27;O&#x27;</span>) * pre_n[i - <span class="hljs-number">1</span>];<br><br>pre[s[i] - <span class="hljs-string">&#x27;A&#x27;</span>][i]++;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> j = <span class="hljs-string">&#x27;A&#x27;</span>; j &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>; ++j)<br>pre[j - <span class="hljs-string">&#x27;A&#x27;</span>][i] += pre[j - <span class="hljs-string">&#x27;A&#x27;</span>][i - <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = len; i &gt;= <span class="hljs-number">1</span>; --i)<span class="hljs-comment">//后缀</span><br>&#123;<br>suf_s[i] = suf_s[i + <span class="hljs-number">1</span>] + (s[i] == <span class="hljs-string">&#x27;S&#x27;</span>);<br>suf_es[i] = suf_es[i + <span class="hljs-number">1</span>] + (s[i] == <span class="hljs-string">&#x27;E&#x27;</span>) * suf_s[i + <span class="hljs-number">1</span>];<br><br>suf[s[i] - <span class="hljs-string">&#x27;A&#x27;</span>][i]++;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> j = <span class="hljs-string">&#x27;A&#x27;</span>; j &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>; ++j)<br>suf[j - <span class="hljs-string">&#x27;A&#x27;</span>][i] += suf[j - <span class="hljs-string">&#x27;A&#x27;</span>][i + <span class="hljs-number">1</span>];<br>&#125;<br><br>cnty = pre_yes[len], cntn = pre_no[len];<br>cout &lt;&lt; pre_yes[len] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; pre_no[len] &lt;&lt; endl;<br><span class="hljs-keyword">if</span> (pre_yes[len] &gt; pre_no[len])<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; ++i)<br>&#123;<br><span class="hljs-type">int</span> cony = <span class="hljs-number">0</span>, conn = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;Y&#x27;</span>)<br>&#123;<br>cony = suf_es[i];<br>conn = <span class="hljs-built_in">max</span>(suf[<span class="hljs-string">&#x27;O&#x27;</span> - <span class="hljs-string">&#x27;A&#x27;</span>][i], pre[<span class="hljs-string">&#x27;N&#x27;</span> - <span class="hljs-string">&#x27;A&#x27;</span>][i]); <span class="hljs-comment">// N O</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;E&#x27;</span>)<br>&#123;<br>cony = pre_y[i] * suf_s[i];<br>conn = <span class="hljs-built_in">max</span>(suf[<span class="hljs-string">&#x27;O&#x27;</span> - <span class="hljs-string">&#x27;A&#x27;</span>][i], pre[<span class="hljs-string">&#x27;N&#x27;</span> - <span class="hljs-string">&#x27;A&#x27;</span>][i]); <span class="hljs-comment">// N O</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;S&#x27;</span>)<br>&#123;<br>cony = pre_ye[i];<br>conn = <span class="hljs-built_in">max</span>(suf[<span class="hljs-string">&#x27;O&#x27;</span> - <span class="hljs-string">&#x27;A&#x27;</span>][i], pre[<span class="hljs-string">&#x27;N&#x27;</span> - <span class="hljs-string">&#x27;A&#x27;</span>][i]); <span class="hljs-comment">// N O</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;N&#x27;</span>)<br>&#123;<br>conn -= suf[<span class="hljs-string">&#x27;O&#x27;</span> - <span class="hljs-string">&#x27;A&#x27;</span>][i];<br>conn += pre[<span class="hljs-string">&#x27;N&#x27;</span> - <span class="hljs-string">&#x27;A&#x27;</span>][i] - <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;O&#x27;</span>)<br>&#123;<br>conn -= pre[<span class="hljs-string">&#x27;N&#x27;</span> - <span class="hljs-string">&#x27;A&#x27;</span>][i];<br>conn += suf[<span class="hljs-string">&#x27;O&#x27;</span> - <span class="hljs-string">&#x27;A&#x27;</span>][i] - <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>conn = <span class="hljs-built_in">max</span>(pre[<span class="hljs-string">&#x27;N&#x27;</span> - <span class="hljs-string">&#x27;A&#x27;</span>][i], suf[<span class="hljs-string">&#x27;O&#x27;</span> - <span class="hljs-string">&#x27;A&#x27;</span>][i]);<br><span class="hljs-keyword">if</span> (cnty - cony &lt; cntn + conn)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;O BUDUI BUDUI&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;DUI DE&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pre_yes[len] &lt; pre_no[len])<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; ++i)<br>&#123;<br><span class="hljs-type">int</span> cony = <span class="hljs-number">0</span>, conn = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;Y&#x27;</span>)<br>&#123;<br>cony -= suf_es[i];<br>cony += <span class="hljs-built_in">max</span>((pre_y[i] - <span class="hljs-number">1</span>) * (suf_s[i]), pre_ye[i - <span class="hljs-number">1</span>]); <span class="hljs-comment">// E S</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;E&#x27;</span>)<br>&#123;<br>cony -= pre_y[i] * suf_s[i];<br>cony += <span class="hljs-built_in">max</span>(suf_es[i + <span class="hljs-number">1</span>], pre_ye[i - <span class="hljs-number">1</span>]); <span class="hljs-comment">// Y S</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;S&#x27;</span>)<br>&#123;<br>cony -= pre_ye[i];<br>cony += <span class="hljs-built_in">max</span>(suf_es[i + <span class="hljs-number">1</span>], (pre_y[i]) * (suf_s[i] - <span class="hljs-number">1</span>)); <span class="hljs-comment">// Y E</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;N&#x27;</span>)<br>&#123;<br>cony = <span class="hljs-built_in">max</span>(&#123;suf_es[i], pre_y[i] * suf_s[i], pre_ye[i]&#125;);<br>conn = suf[<span class="hljs-string">&#x27;O&#x27;</span> - <span class="hljs-string">&#x27;A&#x27;</span>][i];<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;O&#x27;</span>)<br>&#123;<br>cony = <span class="hljs-built_in">max</span>(&#123;suf_es[i], pre_y[i] * suf_s[i], pre_ye[i]&#125;);<br>conn = suf[<span class="hljs-string">&#x27;N&#x27;</span> - <span class="hljs-string">&#x27;A&#x27;</span>][i];<br>&#125;<br><span class="hljs-keyword">else</span><br>cony = <span class="hljs-built_in">max</span>(&#123;suf_es[i], pre_y[i] * suf_s[i], pre_ye[i]&#125;);<br><span class="hljs-keyword">if</span> (cnty + cony &gt; cntn - conn)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;O DUI DE&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;BUDUI BUDUI&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>cout &lt;&lt; <span class="hljs-string">&quot;DUI DUI DUIMA&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Blocked Memory</title>
    <link href="/2025/02/18/blockedmemory/"/>
    <url>/2025/02/18/blockedmemory/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6a035cc76b3ac12c23589157578c573c1dac4c8662f0b3a1e588aeaf99701e24">d32615508316e5533730370e65a199ef68e83f19cdd1accbcb8d1bfae856a545cf7616f5ceee585d73c86ee2b901010ecf6dff1cad8389ad4fd64756080ef24825db25bf1a82e0392fb94eb9904fe45bfa983950b29fcdbda917cc66395374d975e37cf73803bcd29f45609419c0e9eddea558d8e942c17aa0159e5071df41d64aa5688309b533af96a582eeb53cca455eeaf38fb90fda2b701713b134bbe114e63bbf665f52b9272f795a26cb0bf553efe34011861e651af83d2e72810a13fe31499ce623ebc7edc6867a81d0879aee8872480716a2bb57053029d04cee1c184e9d234796907b6e343572966c2683578fe4e7249b19ff4ec7caf43be6b56b93f173d8bdd55d122801bc0568faf19a57f7d911a74f9622c59e16decef4ffe13c32edf86fa0725f7e82d4121f0fa0d91dcfa3a784f35c83dd3cee0dc4cffa268093a098f8792be31a199f22f3b2d6520a10141bea4d963dd586de644c96406cc7669289e1e6fd776b3fb9948571078fb62bf3ffea84c33f1f2c17d75977c4f57501ede1a8342ef1593f81c3ac1553e67bf3ccb9a51a89eba7ef27e22c0c2fb74b36c90fadebfda74fbee0567d00c813b469d798b18727056b5b2ce044959d2ebbec4064bb330eefb45fb94900fd4366f56065397b83c365a31f285b5ee2f0e6dfab5bb629569636c4efa327f2ab4ea162f5793ecc3e61de1de47d20ec6d52221aec75f6af177d846feae83797db8485d8728442be892cad184947058d0a9c1e713d26a6d7fb683050aafe0068b36ed9d5ad4a18852c3eef6c18d436e801f94cd9b6dc3bc32121cb9311746f7539b24b4e8f64e31ec9ae8b272627390f05ef569644cec0196f6ddf4c2d55dd04cc92a31fd81f9f2097bd0da2221b6c15fd94eded82caf5fbfda56c36cc3ec1eb5beb4e42994de0af721318dc666f0f4595a34a4af495f3b4acfbee31e80cf49c960015fa7af8e3c0098ae09fbe686c7efe5a663e6226bca287504e07bb91d0248fdbc8230df4129f785668f842d340feb31d9ba007d9c1a2fa09c44456ca3e21ee99eb913b36f0396059573a17c089f1df3eed018808576ae179dca3198419c3cf431d792119271ccd133c8e86e81f0ca752da139f15714f423caa442adf5b00fecea5f7d975b3075551daa800d605d143b346c09626e9f621f3f31cd1e9447db51f5817fe9dbccdc00e7d18876f3c143cf7697721dfc539549b6d8df6c0fa005236a40d94d0b88ab5e4807950a0ec1203a7c4cb9fe33419783b13d1cfb898339f8274f81af7c81bd5b6ced8bb7281f53430e0ec78f8854d1b7305c8f2fcdd190f88847237101d48e6f30943192d5cb6cca8c56af6cacd0fff6eba1554a1e51546528e78196dcb2fb152a52724e342e03641b06114b48cf95deb3e5113ae0268ec7be4db49f8664e2a34ab5b8816eba359d4df973fc7d06e4d535fed533c97686467a6cf8d0eef740f0654c920502b4a16f1986c3549bb2ffd6554a26bac80ff366dbfc034ed3f6cfa30e58bb0525845d5d320283f220e7a60d3a32c5122b2819c64af90f12d921e95e4c3d2110db8fc3833a6f410e8154b455f4753e71c9cd15a2fe15397a0bc5bd94410c58ce6fe0deb3b59b42d343f033f61c2d87006c2887f01f39044b81979c80da3aab7630ab6079890ff01b931453d79c515e4bc836e42475561d7daaf1513804e81a51f85be3f10d322148d3eb7ba943898d7e8fea351fa988797c6d418fdc56bca175e32b4ab695b0beb8834da78698dccb342436372460949b664b7b10b41550be69af7768ac93ba813b370490bcb352f4ec8906eeaa3aa53f99baf9b084a2e6321cbb2a32987539c4f102ea4eca8572039d003889d4c742e9d1fcf89a6ac9c190f3ae3239d23cfe256cbdd17d501f16443c29b98388d1995246ae151567df330019c3a444bc2cf3ef185551b62d495149533320b7cf5e148bd6217b3eb29668b41762a7bbfb1c6870cc1ef34d2311302245e7d0c24369f5a89242e9fed33cbd3d5c592385866bb2068c015955aff0a9674c91a0c720acd7b2d14e444430d610cd890a1fbceb9529f7d915391e6bb3db5eb98cdcdbea355af01d90b0686fc03b119c38a8875aa9ed0a9fb5f4ddd55b95a6d0ea515aec4e265f5bc627dad24ba7ed6feadd4990f7c76bff23d4a5913f1f74bc8f1ad572e80b0281bad5e1c311d6508b6ab2422abda589491cf49724dec22df9b2ce040b23fd84b078fd52c85480eca98fda3b31d8c04a4cbcdf86375159c3a4c39f4256098e985b7d5be2144b5e3592d629aadfe97b2af0411a72a8a4f93a40440d897ac93d1b11fe28de6d73d5dd48a3a643ec39942b5834898de22634eb9ba6f97038d1bd1936dd876f2e5a4ac402409322cbe3de0305f85796a94c4e6c3f5be45561c01533a9614fe13b3dbe905973d225e709c4c32dc63b8c28f4b0bbff31dc7e524a73d032ea5c1f2419e088f730c3157c9aa5195598f0ffdef2b2fca25deb92e9d5faacdd69f78336c11ea74eb07fbea520b36733ff32fe6419d5db65f8d728f12ddccf2d3399d1058c47e3a6a4527aa3d6442253758f201d7fcb4646a317ac0e6dbe48b909aec4136bf50d512adc052a47a95a1ea5fe51e17bbd1d15fee8e159f7dec58fb4bd61e4c65d66266cd62741abead805c81b189b241aa30f4786c635cd7a98b8214d99199d4143366c99560ba7475881484bf7d3aab3bae7786a4e8b0ffb063e4343607d32da149dd84339ef426d14521aecc3183b7db831dbe909a54859d560f4511e9dd2918dc696aa3667131ec22154b0eae57fbdec14f44e4a178fa59e8398329eacb58048724b06d3f3e9ff865f421f786706e0b54b01f9b8fc84687f92bf8c12a1b1b7ef3cd7f6d1fc68873dba4f6bf683ef2985d1cd6ed8c9d1fc6cfd34bce60512c2765a69210dbc6f970d4c9f441f6cc02e89bad710a8bb3e16468842add43bf51ce2f15895ee67d205dacdae096d671428879b51833dbc1530191ca6163cff8fc67fb6b86f55245dca11ff7f9ddafe45dd7e43d6642251a697d14d1d335b1e3beddac9c86a718d5afea9e22491f8b032e64f02e5a39549f349a8173252241ce580dab1832ec05b3e0d715da3e6303e33b37a7c0bda989695cb74b11276d18367a6a4d54b05461d1fcf5ca4e02746df172e3e336b61ae8ccb8f3525f123973bcd6497f735ad808b3327b7f986ae6175c8aa47b9955d409605fcd6e4333cbb7786e72e9edfb79c43af2bce953a6688428e1ab1c66a52b9019f6b44a98e6e26f9cf056e507f3f82698c9269d8426e5b126e6512c90956b8021e997a6302cea6efb7082bbf34a45a3a1f6884318ea7dec60b535e864fc4645af5127236d017e74691b1a24190eeae6b0fb26c032d2fe90b353e8060901b3c415bf07a73fad1711a10206c8f17eaaab1a9826b89c59f2221ada760ee1bfb67f5b07f2284ec9dc8b16cdc2d69938644f6fd9d107a0129e36b8dbce27fcb44845cbe99b426eb4336e28cdc3fed768be28514fc5d0c5332e250052811446187be03a6eeacc25a3a6aee3813283244333e6d4fb251a19b5f9acfffe29e24d0b742d6e97bcda0a542d41e73f8d7601100f91f18f7b96107c2faf19f1e07c06ac5a6b5de40c9fb7ce0cbeedc5754b02959fb34390c6ef6a0a6c448c87e94d7de8da0a4b24f3653281f74d6c7acca65db463403e244049ad5cb4db1be6014a687f9ad1ec76f69f0d629717078d4ec636a5920834f2e8ed82a3cccddf9264e46249ec5e62ebc0608395fd22544a55ac67a2bc153539929f01455cb2a3dd7ee738d34c004226e8c5485cc5c233d52b9d2eef3a718d274158ca930d756c0fcc057cd7d4e9aeafdc3a8687192543461f5d1851bd9a0e89c215699cfda36821477db94d20757b7f488c57ae2fe9178cd225dbbb16561c651e4d690d8a7876e3a46c5a6eb2814255dcdb51b9e729fe61da40ba85bc86dac9dc1a959df0f9edfe1c61066865cc3ad902fda80ee5a57985096a91d966a5cec18a55105edc36ae2deacc2c23bf1842f8fca4288647f834b4d298140f2e88a0d0dc57b32f47b08c79901ae2febd9553047c649ed3d3239f38fee8d626ad8ca7f91748f06197c1e056649c91998158a4dbc00f4359adb0423d954728f97cc306f79595aa6333cbfdc2ca6f50d7000c5aac16b330256ca4814f617df83026f5f527484b429c2f3f6f046db6b206759ecb16be8e344a6eb63fd2d1fd8339306b964f19b9ab65290efbe1cb7823d8558dc3672820940b2f187a905463f6fff57a1f8e1a2e40778c9fba88aa9fc7a347efa45ef3f93418bb9b8da375049c4cc1268a4f5830b0986488fddfb842b71dc0c4ea36fb151caeb7bc12b1186d4bc6e56c10cc9cc45ff9d58839306f12e876f631b6ee09e48665b6e70dcceec92d4932947b334718c5f0186a5f38d0879c4f349308a51c02e6da8c057f942cd6da0758868e4737e6d176f9522acf35552e36013cc8ca175ab774eca063c60c5db83d023678deb137b460cdbea4507123a90a45ff507a123a2c70d449e9cfc005b01f2f4e5f2a06ba401fedfa7e753b8216242b8af366027533667ba5b67fe256538d9718adb00921d3ac0fe3791d11f5d4968f59459902c1f0623aafa51ba6cc70a03cb5a0a842ec08aaf52a99c950c7c7623873d9506bf67bd562bf0865959b3b5849aebb3308b71bf1cca572600e5ba991573d31f37285500527e967b319eb25b5fa85531c5851f6d92a84ba8c32fa150d17c82bf35eb5e5280029e7e68d3de732069c6d4d24721349a0bafb0111024432436cc72c73943ef59d9c4bbc2091be74ce4492062734430fde9a62f3456f7c2e55c12285b15656014ee3ed5ff2ccde2cd3f07d4fe8b090f61da613935cab82e3daeac9b5f22227a471090359697918dbc2a6fa363c68ec519b7d86b483933d9eb618c3eb04e9be337c1f0405b034257fcde26de1ddb310f039a71c7af1b5494e37b4e3f974ac08da45d4186bee859f6039ba8f9f525125a3d17e47fbaddce967a79bbbfbcea750441eaa2d050ecdca37ecca973ca4a1f2167216f900f684d0ece19a1956475e8df14ace0d44ca091982f0b32b777844fc0b8dcdc57ef4fad53e2c240338b56ed646f0478ac63311ed8dfe8502ab9c846ef1a39d912d6dbe15b59a190c0d57becf4140fe458404ab93bfa5428b1f9221ff4a7a05b73a1e988b7abbb81d473c033654c41ae35efb435dcc3b2c4c1a9ba398b00ea4040e4b21cfe8ba451a975320f3d4fb4fd860522f915e2ec99bece2bc64ea9fb8a60b3c65fa2fc8fa5550c13fd8e73d34ef1285c732508b0b2fcd65738b933e419b33f2cf4d08080ed4e9c2f32e0ff20fa0fce8e41eae4e818bbeaa6fd94e34f88bf69b0b3b3cdbcc1bc1dfd87c0abc8dd634cd74b77981407958040fd28a989f8c6cc23e0ea00cf10fcdf56f6e704073dd13bf641a5a351197d195b7a5cd8b94a6f88b5708aec9d780c8bb2323d0cfd95bf8bbee0a19ad16439f237881041c7e51f739b5312022e936b190ba419179b325faa089fab11600f55620c0d510241d13aff448e3b0d180d996cfd1c398c08a1b89395351f4c555e221801703e493725bf6b87e1fa8287530d494cde5ab622a4183d837b40f1aa679de45ae767cb4ce26574f395719c11afaf058f736babf216996930b821e7ce06f1349ad592687de978a18500ef730bf3ce7f8ad17f359b2951f82d3db72a4cf64799d1e91134d4338bf12c49fd2da0a243a00238bf69aec12e49a1f6133b55282ba1425a7f3485f645c261dd592f50f57a175317b2ff00f33b2d1fdab80a99dc0f56a2e4e30a5b3c3373795518d2f94ef4fd41df9e3148fc9e07b11e3341addfa3a05b115712afc53739d9ba55eff05b9f76a2dbbf5745cd4c7f123144f19b19a07d88c6f557fb87e040770a8374472e619c5717a591b0f3b9f87ad834696e25f100c172497c6e22866b9d53e6784fc55130290a494c3fe80b78acf2e3a426ab240e0ee20d3c2192ba936496565a82290e92ef5998f1e4db4fa14989c1afc401501dca13a63a8e6137df852c90fd09efbf6b748f43d1e7ca225858a702b29dbe0289db3b88fbb27f96ec85e3311c93d17a7aee02f57c091a944df89ed2ac7fb91755dde2f5099460fb1d43cf7b4ec4c9187515167c4f6ad9fc305c9b1258bbb6a9f3aa2e2c1e575513c9437c97b109d90400a55a9598f824366b250c852e0038510293cb432e4a3766b5e55bc8bf8f9f841db88e4e74a5badcb7a1124b30be5b94159f379fa072ac2be488309522ca75d6b2d55fee991640e5f94bf044d5bb4facd6c5a5c73e790a1f53acb194f31a0bafd9a432ce9c074fc17258795c25f8cacd20cfcac635b4bcbdeb23c9af597652d34d300a725cd296e4c9726ce7f45737ff1bd5907bb0c0b5103d979e76df9979e8524eb4e9ed7abcb0a8a30eb8619e74a92435cbbb5ffaa5dca8f73dd74c6189a5b7092806c968f3df1341a5c3f92db7fa12c66f08a5e1d445693bf89d6238eb6512a54f85861ef125005e257786d2780a6c4dbeccab0f320113b173021dc6bfcf94ece129b7aedb42c6e918444e4fdf1caf76dfa4f982cc064c581d97fa9838b72973624f298b261fd18ed3b29daf4c482d122076f9fbc8393ff78c14fd9a1e3435d17a6997db0b18bfa17a949dbb1810af08c1df8a3985caea376b13598d005a33e6c57519f754faff10d24ae9c23a280cf546418a6366c63ce965f1fe9b822e929c66161d568387191ab3d9b0cffdadf80aad826d3e69c672cb153655af4481d272a0fbeaec3fba9e4951da136c264ba73614f7cfcaf45b5d8561953e4a5bbee829186407ce759397afa973aca0f1dc57a6759f52e3efb6a95d43fafe308d2cd7efe8ff8d90326baf7bdc3d77c3d1d271fae612d865fc37c441cebe8118556418a9d17fae1b693df3587fb44e5ac4bc2268cb9668936b413ab04489744b7c4e9456a2847132f732a8219a9285e1d2d380bb65a1aa8979f84f1752eb0361df06ba92e5bf92eb2f5dfe663ff38cb594e3a26ef20b37600a97f94ec7e6f7545fd000a2aa23e08144bd6319ae0158f61e5335bd3691146b6ec021087d2a49d75201bbec1cecb53d519ff9cf3883bf7df8046388fcc687ae4eecea73691ed4c7242d8f3eacd2fa67723293b78582364e7217f87f1a7115bfc1ee9cd50e042b564cad2505f6d79a845d4225143c16080ca1a41fc997400e1905da82ee1f3722dde8ab81b008c57a7b342c11079800a8ae362e860fff3980fb607a4809095a65ae83c75a811174ec6b0b2972762a8b497d9bad9ce167b1bcd8f7c48de184c4359841171a3ccae61325a4e8c4f3bdca8ce25132f4408f55ffe1a906cf330a2cdaa3f4852a662ee6001236e5745419033f181e251e9fbed615d0a41f6b2d050c772d2861c95650350eebe914c67a8e571b824411050a8840867fb2832367a0ea0ff4e9eb868df0a7d0769c607bc9afa9c9bb767685da4d25d7ea7ae77c9b2a7e46ce3fb83a8e92470de666fb984ed77d4076fcccf7a3f7ecb08e54a8acfda68ca00c9c8dd34bf59e44e415502fc2900dd66581249bd533c660e88a2958be1e2754b2c1d885ae1a8054a532990b658ff3085ad97c6618b2073672f48d201e83795379426bc89ec98af1e4892392a2ba2ecab9477d47d59386e5dc059e88e9fd97bbb9ab8727d88d312228c53610a64cfb2b88af8f38f3b1f77bb8864fc74b8be07c60e25781291dc1172248d8859a302a8cb6877e68e0da0744f204da7ff4677513818eb91be1ccb861996047f234ca04e98dc5bfbe6a12893d1bd3c95ba2cfe07067b8babe5e16a32c0085a90018e91be4fdf5c06f625b945068b19f616631c54abe4f33ba91d832abfe5decaa9bbe0c280e7bf0bf71a1bf9107ab6d82239dbafff58c9e7bd388def61151a205ce87d312e02c2ef3823156e659043d598308b6147c2bd64dfd453a8eda00055f53ea44d15b752c221f4c852478c68277ba31732afe0d76bee1a2dd9a8743c6cc360e3133c90e113b671063118d27e9586d918bc22c6df7d6174a7f8653d70d105ec114c43e055f41f47750c905295f94374814088a0c4838e3c451deb193862fbc20dbeca30ac93a3bfb48b651bf6482aa05a23d19870d9290af32313e536b9a3d482ff5cb2807ee9fd566c9158d55aa137527e6e099a3839015e9d378d5f8727fcaa88af72bcbc22521ae9341394e302d549cb3af3eca05e39f2b0e7881fb209f3394d29e0c9746aecdf86970de837d3bbfaa812748435c60d5fbb37f0bc61ed112ef70bbb3e29df37b5f333607ca20f9caeb24429272dacf7e28f8a66edf2dbbe51371dcdbced2bcce1c4d1ec875f17041802b97014782ff54054b5e06db9b51e26992a13627a6fddc4591f3147387ea23cead8f92d56cd79f7b28ad3aa2041afd73a14f532c43ae21db20d3a69fefb4cfdac7119ecd0d1f42f2c12bd2c2c715f100622339edb45c05e82a944019479ecd67a7381dadcb33e716322433927166152c049df3890a6707b273d48a7ae69461e18337457bac128f611ac0d551915f2034d3085d2da1e28ec2b4d4b9922816a6b3bfc4c84666a5ec5c3bdbdc9f43771d8ed0af34b04221540fe2a48730ee0f9b71b1f84e7c046fbb417f022cda65fb7fea3d595962464a941fba9c5aca676efea2ae197bba1f3d2525d92371b7ce91d03f189252800728a58e52272f5b95fbc0b0280bc7b620dae18ca4a57f36189ce68468fec24a2a68430f6ce6a09de015a9812c1a399995106c685029e7594b3c0b11b4e2f31a28a17cd6ec237b52a59e31312bd6e82517ab337dc0595d811bfad3af415df83532535bad18e68f4eb9fb1230ad39d2dbd1f6c219fea3a8099f3c607dcafc529258d84f70f86fa00b8fe33950266c3369ab7203685cd71df1ae200f6ce586e892e6e2a84bd0cfcbd79944e8857ca2003a4fbc3040dd3c049ad92def1da6e4773f41c24f8f8275b20dac9bf0df4f12b6a62b8581b636ff99d59cad04cf02009c16e5026d817117cfe619e10280cbaa3c5a3929b9f79caa8335306c92a06e066e1de24dcb1b3f89f34e536a774211c6527b2aafc4aab55ccd9d3a8a75bfe1b3200fb2eaf368787e1f4c430c8dd488a64f41dcf1b91b70c0ed0f1af376b5f3ec31695cd976ec5a260735921031aeb1fb2eebae567110fd871400487f615a03ef31ca06a984b4ba8b9b2c871efef52f8dae034a2a5abdcc6770384054791947515452aed5bf60225d5d2017fa149ec854d8339b9f54300e9b775d3dc7c6a707dbe29da494ae17b31856d81c147aacdfbf6c826248425ca3c0899a50ca2d0ce524af370731f0bc02c2d9b6a6d7e31fcca9ca56f749277b9bd5d5f1b6fa8e7a54dbe73eec04282f53b8e04cc7d5e80c08ab3ee3e9206537dcb11046f2eddd6d3dbf1f763316f114fd85c8848a93034234bd9a692e1d31c0cab9198d0d9a4a5ba93a29f9062f843a0f7f4f075fbbef410a6f40088c1ca0c44a8f5874712f445748840f451cf</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Talk to you</title>
    <link href="/2025/02/18/tosay/"/>
    <url>/2025/02/18/tosay/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a443d7ca56d0c737d017aa8b55ea41a96f40b88e97c040d08875944dd81b6174">9d00f28e016e747178d32a1ed753721aa93cedf9513454bfe2c3e3241e3054aaf17a23d21ca34860d3fed6c762d4866d0c83e08153776dd0778551ac4e3a3555397e1dad1da11d4db2a9ef36785e8eaba3e1238b7d5d0b8ba8538bbd0358b218a4c0d7bf4e0c59c0745f8800418b5a27767d959a8f3d1ace544730d71ee926389365034d76693a43663622909354bc45388a3dbeeb744443fd271daf8ea4c3f910c25beb9622872be5850cd9f077356540dd63a767d0edaf7533a041dc21cd9dd3b513f862d0d55e6b255b3dbcc2391374f7af5ebcfec3645f457ed725ea8913ab1d6de52324b2ec6dc71039045cbee7028dbf9f61911b83822fb38892701a406865532b871aa091fc9a51bf7be58a15272c76173affab4b25ebae07a00e650c636c36e15c5cdb50fd78a24d8da7ebcc62d9fde7b670f18b8bfeeb8f5a3d97bdea9b8cac3b5e98e3203ceae4e735949aaf7c1f1fe1d81109d540e769f89766e8933f7fa13af097e7edbb6f4399b6930aec7f1bbea63251ba5d26eeca8bf0ba52bdebe015b1d86475ffe3780c9a16d6fe325f7816773e10410ca55b595a1e7dc46be38bdcd95a24f6559334755a932d0c1112d8d13c35d755c34599d4baf866e37df3c8ea585820e11e8dfaaa2b9c77cec78699ef884c8853c290af6e702043c4939379da9a831bac221c02fa1455877b004d8c6901d0f4878ae2e215a4adc1cea4b004f1764673587c48773396f62c84440413365f6b210e164b392793af8c64db106c20dc73cca4969244d58df3ff67dc349c365972b6b64aa3c4ada1159491a52154ff1ddb4f06f65a8f2fc7da4a732cea08804dff5824d2b1079e13612234b7f00ac0f788ab3f825b222b7697ade80ae8c6158c47ce3066382f9fe1726eeb49a8256a9edd45944fcb05f5a5027be4cc92ec29462c3d105036e6a7af0538e5c79a8dc63ddf9f0ee760b9a3f2d9a51963a41637b3cc53c9e0a9321ddfc81d9c9c47b424638ea553effc0cf955f5109c0f94bd439e482caabd5aa68807048ec9f0e9ba39c7a52c98cf13df5720d05fbfb560e2612273d2776a99954eb1298183da700c181a5bd67515b5c83c380ccae9c809a646f1c5285c3dfad95c20172c20ddf7deccefbeb613fc3a01b8c49931bfec28d9afb21ead55c0087ab3d44001f5e6b374ede07b1b7bb7fab0cb449f46f126e44515580cb6a442cb49b339c72aae6820fe564a02e113a9b6d826cc1853090584c451c8d352ba3765d01d78d8e1a0b944eab4ef023ef703511c4e55801adc54d0a53eaade267ffaa960873d08bd5f1996ae44a504f29ec64da883cef02255a6ff4c9f07082163a24c171b9def237d559fd26c21395ce300a615993f107957381135be68e07d9d05b34201b4a25c1ce20e6177ab233ade280db82882930c503f42b362929f901f45ca3f779054da08f74fee64994063912b0a7c3965fd2932ba968ec1e966e22ce6ca2ceab1122f51b5f7c56dcaa8fc088c0ac087d244545c0f5886e8ce97b9270b364aa21ec53d568ee54330b19a1c6a5a97ec2a0c4076076e3802ad00d35eaa87d1b8ef8148d45ccdad18f89dbac40f8066feb1fac29c4eb80c8cd68df008c93d033cfcca523209acb63cbb17b2945bb88c34ba4e26e38903efbc449f5840093be1352c46a424631d78f00067ec146d7eb34eda92f9a61557b91651ec0c74c6ad2229093bdfdb9aa5fb726a96708aa2f0b94859ba908b97d6b6bb227d7cb202b8b7c75c1b382e4cfe3f121c30e3600fa832109de72ecac81dc0cb747606c6c5a5a393573c446594fd464c75f7ca434ad7576ef067d28ada5cadc22bf963b24d696f49e62971a2a3e7973e7933c05b9698658014d00e25cb7e63f23442a80db03e8d3ba6dd72a7ba3f50e0d4b93c986983dff3787b9a5aa3ca2f8abeb7ec7b8ec58e8b63a78480bd</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2024ICPC香港站游记</title>
    <link href="/2025/02/07/2024ICPCHK/"/>
    <url>/2025/02/07/2024ICPCHK/</url>
    
    <content type="html"><![CDATA[<h1 id="2024ICPC香港站游记"><a href="#2024ICPC香港站游记" class="headerlink" title="2024ICPC香港站游记"></a>2024ICPC香港站游记</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>虽然香港站老早之前就结束了，但还是想写篇博客纪念一下自己第一次参加ICPC。<del>（其实是自己觉得之前写的那个朋友圈不够好，重新再写一篇）</del></p><h2 id="去香港之前"><a href="#去香港之前" class="headerlink" title="去香港之前"></a>去香港之前</h2><p>能去香港真的是一件非常巧合的事情。zyw的两个队友一个比赛当天考研，另外一个不太想去，也可能是zyw就坐在我斜对面，去香港这个事情就这么答应下来了，在第一轮的申请名额中也顺利申请到了名额<del>（尽管24年网络赛并不理想，也多亏了香港站的名额分配规则）</del>。后来香港站第二轮发放名额，lhw也是凭借自己手速，用50s填完了收集表，顺利抢到了第二个名额。两个队伍、六个人去香港打比赛（最热闹的一集）。</p><p>后来就开始vp区域赛&#x2F;省赛了，每次vp下来的结果大部分都是不如另外一支队伍，做题做不出来总是让人心碎，要不就是吃了好几发罚时才ac。按照lh的大概意思就是“希望这次香港站不要差他们太多”（这是伏笔）。</p><p>我们就这样没有底去了香港，这是一场悲壮的旅行，会赢吗？</p><h2 id="Day0（12-20）"><a href="#Day0（12-20）" class="headerlink" title="Day0（12.20）"></a>Day0（12.20）</h2><p>我们七点多就到了天津西站，进站的首要任务就去打印车票<del>（我是车票收集爱好者）</del>。到的太早了换完港币在机场就没事干了。换港币的时候，本来想一人换200港币，结果只有500面额的港币，最后一人换了一张500的。 晚上到了香港已经很晚了。直接买了张八达通<del>（我也是卡片收集爱好者）</del>，之后坐机场快线到市区内，香港真是垂直空间利用的太好了，用导航完全不好使、晕头转向，最后还是直接打车到了酒店，到了后发现400一晚的酒店破败不堪，非常小，只有两张小床（这也是伏笔），这哪是酒店，这根本就是民宿。香港的物价比我想象的还要贵，比东京还贵，蜜雪冰城一杯柠檬水竟然要9港币！整整9港币！深夜就跟lh挤在一张小床上边睡着了（他一直抢我被子）。</p><p><img src="/img/60hkd.jpg" alt="60港币一盘的炒面"></p><h2 id="Day1（12-21）"><a href="#Day1（12-21）" class="headerlink" title="Day1（12.21）"></a>Day1（12.21）</h2><p>热身赛。早上去汇丰银行办港卡，前一天晚上在汇丰香港app线上申请成功了，去线下存了100港币到卡里。（队友好像因为名字两个字办卡要审核）办完就去吃了麦，没想到麦当劳的早餐套餐也这么贵，一个套餐就40港币。领物资环节，主办方送了可爱小熊，去华为拿了个青色奶龙和手提袋，JaneStreet领了衣服。热身赛题A比较有意思15个选择，开始以为答案是藏头STARTPARTYTODAY非常自信的交了一发，结果wa了。B是去年杭州站原题。C是VP过的原题，当时就没做出来、也没补题，现场上抄了个代码交上去也没ac。D也是杭州题，很难不会做。也是第一次参加icpc，各种操作也是第一次接触不太适应。热身赛结束后就到了最隆重的晚宴环节，没想到香港理工准备的晚宴这么顶级。我们桌坐了9个人。一共九个菜。非常好吃，奢华。晚宴的时候JaneStreet又送了扑克牌。（第二天发现好像还送了袋子，有些队伍说在晚宴拿到了，但我们没拿到）吃完晚宴，我们学校两队兵分两路，部分队友去摩天轮了。我们三人去打舞萌了，顺便还和我港科大的学弟一起拼了机。深夜回到酒店听到他们房间在那嘻嘻哈哈，我听说他们在做dp（实际上在斗地主<del>，打算法竞赛打的</del>）。</p><p><img src="/img/dinner.jpg" alt="晚宴"></p><h2 id="Day2（12-22）"><a href="#Day2（12-22）" class="headerlink" title="Day2（12.22）"></a>Day2（12.22）</h2><p>正式赛。还是有点小小的紧张，一开始的时候分工是我去调vscode设置和敲模板上去，另外两个队友去读题，全英文题面还是真有点读不下去。很快啊，6分钟的时候C题就有人过了，我就去读C题。“assign什么意思？lh你帮我读读题，我没读明白。“最后还是他给我解释了一遍我才明白怎么回事、赶紧去写。”这个数组这边不减，这边不增，直接就是输出最大值的位置“。最后也是检查了好几遍，在23分钟一下就ac了。跟榜做题，接下来是K题，我也没看明白，最后zyw他去写交了一发wa了。”我又明白了。“zyw最后吃了两发罚时在第75分钟过了。</p><p>榜单上F题过了几个，我去看F，他们接着看别的。最后我们几个把F、G、H都看了互相交换了题意，发现都不会做。一开始我以为F是直接把这个环对半劈开算，后来zyw说了一个”2 1 0 0 0 0“的情况就把我的想法踩灭了。H题一看a的数据范围还有8，还以为是什么状压dp（实际上赛后题解并不是）。最后无奈之下，比赛180分钟左右，去看了过题数相对较多的L题。L题我一开始就想的是这肯定和奇偶性有点关系（这也是错的）。”我知道了“，zyw他说他又知道了，跟我说了个沿着对角线去构造，具体怎么构造我也没太听懂他就去写了。zyw怒写200+行代码，写完之后一看样例过了，”过了样例就交呗“。一行<code>submit L.cpp</code>在终端打下去，摁下回车，我们三个抬起头就盯着赛场大屏幕的实时提交列表看，竟然过了！”zyw是你是我爹“，激动的快喊出来了，一看榜单正式队伍rank31（银牌线rk45）基本上算是稳了。瞬间压力就没有了，我队友还在那讨论G题，我就开始玩，一直盯着其他队伍的提交看。到最后也就是三题结束了这场比赛。</p><p>闭幕式最后在CityU举办，英文题解真的一点也看不懂。最后滚榜下来是正式队伍rk37（看来这场还是很难的，一小时封榜排名就掉了6个）。由于香港酒店（就是民宿）太过破旧，准备连夜去深圳住一晚高端酒店。对比之下深圳的酒店就是仙境。晚上来了一顿丰盛的夜宵。爽！！！</p><p><img src="/img/medal.jpg" alt="两个队伍一铜一银"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>非常感谢我的两个队友，他们都付出了很多，有zyw做出L题，有lh给我俩解释题意，我什么都没干（我自裁，这就去加练）。感谢主办方带来很棒的参赛体验，还有顶级的港理晚宴（据说一桌2500hkd）。尤其感谢zyw，这篇文章一部分是抄的他的。</p><p><img src="/img/group_photo.jpg" alt="合影"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>你好，世界</title>
    <link href="/2025/02/07/hello-world/"/>
    <url>/2025/02/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p> 自己捣鼓了半天，总算是能用了。</p><p> 正如这个博客的名字一样<strong>LuminousYT</strong>，很显然<strong>LYT</strong>就是我的名字首拼。另外<strong>luminous</strong>在词典中的翻译是（尤指在黑暗中）发亮的，放光的;夜光的，希望我的博客能够发光发热，能够照亮你我的内心。这也是<strong>LuminousYT</strong>这个名字的由来。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
